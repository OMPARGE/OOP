#include <iostream>
#include <queue>

using namespace std;

class TreeNode {
public:
    int data;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) : data(value), left(nullptr), right(nullptr) {}
};

class BinarySearchTree {
private:
    TreeNode* root;

    TreeNode* insertRecursive(TreeNode* node, int key) {
        if (node == nullptr) {
            return new TreeNode(key);
        }

        if (key < node->data) {
            node->left = insertRecursive(node->left, key);
        } else if (key > node->data) {
            node->right = insertRecursive(node->right, key);
        } else {
        }

        return node;
    }

    TreeNode* findMin(TreeNode* node) {
        while (node->left != nullptr) {
            node = node->left;
        }
        return node;
    }

    TreeNode* deleteNode(TreeNode* node, int key) {
        if (node == nullptr) {
            return nullptr;
        }

        if (key < node->data) {
            node->left = deleteNode(node->left, key);
        } else if (key > node->data) {
            node->right = deleteNode(node->right, key);
        } else {
            if (node->left == nullptr) {
                TreeNode* temp = node->right;
                delete node;
                return temp;
            } else if (node->right == nullptr) {
                TreeNode* temp = node->left;
                delete node;
                return temp;
            }

            TreeNode* temp = findMin(node->right);

            node->data = temp->data;

            node->right = deleteNode(node->right, temp->data);
        }

        return node;
    }

    TreeNode* searchRecursive(TreeNode* node, int key) {
        if (node == nullptr || node->data == key) {
            return node;
        }

        if (key < node->data) {
            return searchRecursive(node->left, key);
        }

        return searchRecursive(node->right, key);
    }

    void inOrderTraversal(TreeNode* node) {
        if (node != nullptr) {
            inOrderTraversal(node->left);
            cout << node->data << " ";
            inOrderTraversal(node->right);
        }
    }

    void displayLeafNodes(TreeNode* node) {
        if (node != nullptr) {
            if (node->left == nullptr && node->right == nullptr) {
                cout << node->data << " ";
            }
            displayLeafNodes(node->left);
            displayLeafNodes(node->right);
        }
    }

    void displayLevelWise() {
        if (root == nullptr) {
            cout << "Tree is empty." << endl;
            return;
        }

        queue<TreeNode*> q;
        q.push(root);

        while (!q.empty()) {
            int levelSize = q.size();

            for (int i = 0; i < levelSize; ++i) {
                TreeNode* current = q.front();
                q.pop();

                cout << current->data << " ";

                if (current->left != nullptr) {
                    q.push(current->left);
                }

                if (current->right != nullptr) {
                    q.push(current->right);
                }
            }

            cout << endl;
        }
    }

public:
    BinarySearchTree() : root(nullptr) {}

    void insert(int key) {
        root = insertRecursive(root, key);
    }

    void remove(int key) {
        root = deleteNode(root, key);
    }

    bool search(int key) {
        return searchRecursive(root, key) != nullptr;
    }

    void displayTree() {
        cout << "In-order Traversal: ";
        inOrderTraversal(root);
        cout << endl;
    }

    void displayLeafNodes() {
        cout << "Leaf Nodes: ";
        displayLeafNodes(root);
        cout << endl;
    }

    void displayLevelWiseTree() {
        cout << "Tree Level-wise: " << endl;
        displayLevelWise();
    }
};

int main() {
    BinarySearchTree bst;

    bst.insert(50);
    bst.insert(30);
    bst.insert(70);
    bst.insert(20);
    bst.insert(40);
    bst.insert(60);
    bst.insert(80);

    cout << "Original BST:" << endl;
    bst.displayTree();

    cout << "Leaf Nodes of the BST:" << endl;
    bst.displayLeafNodes();

    cout << "BST Level-wise:" << endl;
    bst.displayLevelWiseTree();

    int keyToSearch = 40;
    cout << "Searching for " << keyToSearch << ": ";
    if (bst.search(keyToSearch)) {
        cout << "Found" << endl;
    } else {
        cout << "Not Found" << endl;
    }

    int keyToDelete = 30;
    bst.remove(keyToDelete);
    cout << "BST after deleting " << keyToDelete << ":" << endl;
    bst.displayTree();

    return 0;
}
